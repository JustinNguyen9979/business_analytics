import streamlit as st
import requests
import pandas as pd

BACKEND_URL = "http://backend:8000"

# (C√°c h√†m API gi·ªØ nguy√™n)
def get_all_brands():
    try: return requests.get(f"{BACKEND_URL}/brands/").json()
    except: return []
def create_brand(name):
    try:
        res = requests.post(f"{BACKEND_URL}/brands/", json={"name": name})
        if res.status_code == 200: st.success(f"ƒê√£ t·∫°o brand '{name}'!"); return res.json()
        else: st.error(f"L·ªói: {res.json().get('detail')}"); return None
    except: st.error("L·ªói k·∫øt n·ªëi backend."); return None
def get_brand_details(brand_id):
    try: return requests.get(f"{BACKEND_URL}/brands/{brand_id}").json()
    except: return None

st.set_page_config(layout="wide", page_title="CEO Dashboard")
if 'page' not in st.session_state: st.session_state.page = 'brand_lobby'
if 'selected_brand_id' not in st.session_state: st.session_state.selected_brand_id = None

ADS_COLUMNS = {
    "campaign_name": "T√™n Chi·∫øn d·ªãch",
    "start_date": "Ng√†y b·∫Øt ƒë·∫ßu",
    "impressions": "L∆∞·ª£t xem",
    "product_impressions": "L∆∞·ª£t xem SP",
    "clicks": "L∆∞·ª£t click",
    "product_clicks": "L∆∞·ª£t click SP",
    "ctr": "CTR (%)",
    "product_ctr": "CTR SP (%)",
    "conversions": "Chuy·ªÉn ƒë·ªïi",
    "items_sold": "S·∫£n ph·∫©m b√°n ƒë∆∞·ª£c",
    "gmv": " GMV",
    "expense": "Chi ph√≠",
    "roas": "ROAS",
    "acos": "ACOS (%)"
}

REVENUE_COLUMNS = {
    "order_code": "M√£ ƒë∆°n h√†ng",
    "order_date": "Ng√†y ƒë·∫∑t h√†ng",
    "payment_completed_date": "Ng√†y thanh to√°n",
    "total_payment": "T·ªïng thanh to√°n",
    "product_price": "Gi√° s·∫£n ph·∫©m",
    "refund_amount": "Ti·ªÅn ho√†n l·∫°i", 
    "shipping_fee": "Ph√≠ v·∫≠n chuy·ªÉn",
    "buyer_paid_shipping_fee": "Ph√≠ VC ng∆∞·ªùi mua tr·∫£", 
    "actual_shipping_fee": "Ph√≠ VC th·ª±c t·∫ø", 
    "shopee_subsidized_shipping_fee": "Shopee tr·ª£ gi√° VC", 
    "seller_voucher_code": "M√£ gi·∫£m gi√°", 
    "fixed_fee": "Ph√≠ c·ªë ƒë·ªãnh",
    "service_fee": "Ph√≠ d·ªãch v·ª•",
    "payment_fee": "Ph√≠ thanh to√°n",
    "commission_fee": "Ph√≠ hoa h·ªìng", 
    "affiliate_marketing_fee": "Ph√≠ ti·∫øp th·ªã li√™n k·∫øt", 
    "buyer_username": "Ng∆∞·ªùi mua" 
}

# --- TRANG S·∫¢NH CH·ªú ---
if st.session_state.page == 'brand_lobby':
    st.title("Ch√†o m·ª´ng anh ƒë·∫øn v·ªõi CEO Dashboard")
    st.header("Vui l√≤ng ch·ªçn ho·∫∑c t·∫°o m·ªôt Brand ƒë·ªÉ b·∫Øt ƒë·∫ßu")
    
    all_brands = get_all_brands()
    if all_brands:
        brand_names = {brand['name']: brand['id'] for brand in all_brands}
        selected_brand_name = st.selectbox("Ch·ªçn Brand hi·ªán c√≥", options=brand_names.keys())
        if st.button("ƒêi ƒë·∫øn Dashboard"):
            st.session_state.selected_brand_id = brand_names[selected_brand_name]
            st.session_state.page = 'dashboard'
            st.rerun()
    else:
        st.info("Ch∆∞a c√≥ brand n√†o.")
    
    st.write("---")
    with st.form("new_brand_form"):
        new_brand_name = st.text_input("Ho·∫∑c t·∫°o Brand m·ªõi")
        if st.form_submit_button("T·∫°o Brand") and new_brand_name:
            if create_brand(new_brand_name): st.rerun()

# --- TRANG DASHBOARD ---
elif st.session_state.page == 'dashboard':
    brand_id = st.session_state.selected_brand_id
    brand_data = get_brand_details(brand_id)

    if brand_data:
        st.title(f"Dashboard cho Brand: {brand_data['name']}")
        if st.button("‚óÄÔ∏è Quay l·∫°i danh s√°ch Brand"):
            st.session_state.page = 'brand_lobby'; st.rerun()
        
        # --- KHU V·ª∞C UPLOAD M·ªöI ---
        with st.expander("‚¨ÜÔ∏è Upload D·ªØ li·ªáu M·ªõi cho Brand n√†y"):
            with st.form("upload_form", clear_on_submit=True):
                cost_file = st.file_uploader("1. File Gi√° v·ªën (.xlsx)", type="xlsx")
                order_file = st.file_uploader("2. File ƒê∆°n h√†ng (.xlsx)", type="xlsx")
                ad_file = st.file_uploader("3. File Qu·∫£ng c√°o (.csv)", type="csv")
                revenue_file = st.file_uploader("4. File Doanh thu (.xlsx)", type="xlsx")
                
                if st.form_submit_button("B·∫Øt ƒë·∫ßu Upload v√† X·ª≠ l√Ω"):
                    with st.spinner("ƒêang x·ª≠ l√Ω..."):
                        files_to_upload = {}
                        if cost_file: files_to_upload['cost_file'] = (cost_file.name, cost_file, cost_file.type)
                        if order_file: files_to_upload['order_file'] = (order_file.name, order_file, order_file.type)
                        if ad_file: files_to_upload['ad_file'] = (ad_file.name, ad_file, ad_file.type)
                        if revenue_file: files_to_upload['revenue_file'] = (revenue_file.name, revenue_file, revenue_file.type)

                        if files_to_upload:
                            res = requests.post(f"{BACKEND_URL}/upload/shopee/{brand_id}", files=files_to_upload)
                            if res.status_code == 200:
                                st.success("X·ª≠ l√Ω th√†nh c√¥ng!")
                                st.json(res.json())
                            else:
                                st.error(f"L·ªói: {res.text}")
                        else:
                            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file ƒë·ªÉ upload.")

        st.write("---")
        # --- (Ph·∫ßn hi·ªÉn th·ªã KPI v√† bi·ªÉu ƒë·ªì gi·ªØ nguy√™n) ---
        st.header("üìä Ch·ªâ s·ªë Hi·ªáu su·∫•t Ch√≠nh (KPIs)")
        # T√çNH TO√ÅN C√ÅC CH·ªà S·ªê
        orders = brand_data.get('orders', [])
        customers = brand_data.get('customers', [])
        shopee_ads = brand_data.get('shopee_ads', [])
        shopee_revenues = brand_data.get('shopee_revenues', [])

        # Ch·ªâ s·ªë t·ª´ ƒë∆°n h√†ng v√† kh√°ch h√†ng
        total_orders = len(orders)
        cancelled_orders = len([o for o in orders if o['status'] == 'ƒê√£ h·ªßy'])
        total_customers = len(customers)
        cancellation_rate = (cancelled_orders / total_orders * 100) if total_orders > 0 else 0

        # Ch·ªâ s·ªë t·ª´ d·ªØ li·ªáu m·ªõi (Qu·∫£ng c√°o v√† Doanh thu)
        total_ad_spend = sum(ad.get('expense', 0) for ad in shopee_ads)
        total_gmv_from_ads = sum(ad.get('gmv', 0) for ad in shopee_ads)
        total_revenue_payment = sum(rev.get('total_payment', 0) for rev in shopee_revenues)

        # HI·ªÇN TH·ªä C√ÅC CH·ªà S·ªê
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng ƒë∆°n h√†ng", f"{total_orders:,}")
            st.metric("T·ªïng chi ph√≠ QC", f"{total_ad_spend:,.0f} ‚Ç´")
        with col2:
            st.metric("S·ªë ƒë∆°n h·ªßy", f"{cancelled_orders:,}")
            st.metric("Doanh thu t·ª´ QC (GMV)", f"{total_gmv_from_ads:,.0f} ‚Ç´")
        with col3:
            st.metric("T·ª∑ l·ªá h·ªßy", f"{cancellation_rate:.2f}%")
            st.metric("T·ªïng doanh thu th·ª±c nh·∫≠n", f"{total_revenue_payment:,.0f} ‚Ç´")
        with col4:
            st.metric("T·ªïng kh√°ch h√†ng", f"{total_customers:,}")
            # T√≠nh ROAS t·ªïng
            overall_roas = (total_gmv_from_ads / total_ad_spend) if total_ad_spend > 0 else 0
            st.metric("ROAS T·ªïng", f"{overall_roas:.2f}")

        # --- HI·ªÇN TH·ªä D·ªÆ LI·ªÜU M·ªöI (D·∫†NG B·∫¢NG) ---
        st.header("üìã D·ªØ li·ªáu V·ª´a Import")
        tab1, tab2 = st.tabs(["D·ªØ li·ªáu Qu·∫£ng c√°o", "D·ªØ li·ªáu Doanh thu"])

        with tab1:
            if brand_data.get('shopee_ads'):
                df_ads = pd.DataFrame(brand_data['shopee_ads'])
                
                # ƒê·ªãnh nghƒ©a c√°ch hi·ªÉn th·ªã cho t·ª´ng c·ªôt
                column_config_ads = {
                    "campaign_name": st.column_config.TextColumn("T√™n Chi·∫øn d·ªãch"),
                    "start_date": st.column_config.DateColumn("Ng√†y b·∫Øt ƒë·∫ßu", format="DD/MM/YYYY"),
                    "impressions": st.column_config.NumberColumn("L∆∞·ª£t xem", format="%d"),
                    "clicks": st.column_config.NumberColumn("L∆∞·ª£t click", format="%d"),
                    "ctr": st.column_config.NumberColumn("CTR (%)", format="%.2f%%"),
                    "conversions": st.column_config.NumberColumn("Chuy·ªÉn ƒë·ªïi", format="%d"),
                    "items_sold": st.column_config.NumberColumn("S·∫£n ph·∫©m b√°n ƒë∆∞·ª£c", format="%d"),
                    "gmv": st.column_config.NumberColumn("Doanh thu (GMV)", format="%d ƒë"),
                    "expense": st.column_config.NumberColumn("Chi ph√≠", format="%d ƒë"),
                    "roas": st.column_config.NumberColumn("ROAS", format="%.2f"),
                    "direct_roas": st.column_config.NumberColumn("ROAS Tr·ª±c ti·∫øp", format="%.2f"),
                    "acos": st.column_config.NumberColumn("ACOS (%)", format="%.2f%%"),
                    "direct_acos": st.column_config.NumberColumn("ACOS Tr·ª±c ti·∫øp (%)", format="%.2f%%"),
                    "product_impressions": st.column_config.NumberColumn("L∆∞·ª£t xem SP", format="%d"),
                    "product_clicks": st.column_config.NumberColumn("L∆∞·ª£t click SP", format="%d"),
                    "product_ctr": st.column_config.NumberColumn("CTR SP (%)", format="%.2f%%"),
                }
                
                st.dataframe(df_ads, column_config=column_config_ads, use_container_width=True,
                            # ·∫®n c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt
                            hide_index=True, column_order=list(column_config_ads.keys()))
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu qu·∫£ng c√°o.")

        with tab2:
            if brand_data.get('shopee_revenues'):
                df_revenue = pd.DataFrame(brand_data['shopee_revenues'])

                # ƒê·ªãnh nghƒ©a c√°ch hi·ªÉn th·ªã cho t·ª´ng c·ªôt
                column_config_revenue = {
                    "order_code": "M√£ ƒë∆°n h√†ng",
                    "order_date": st.column_config.DateColumn("Ng√†y ƒë·∫∑t h√†ng", format="DD/MM/YYYY"),
                    "payment_completed_date": st.column_config.DateColumn("Ng√†y thanh to√°n", format="DD/MM/YYYY"),
                    "total_payment": st.column_config.NumberColumn("T·ªïng thanh to√°n", format="%d ƒë"),
                    "product_price": st.column_config.NumberColumn("Gi√° s·∫£n ph·∫©m", format="%d ƒë"),
                    "refund_amount": st.column_config.NumberColumn("Ti·ªÅn ho√†n l·∫°i", format="%d ƒë"),
                    "shipping_fee": st.column_config.NumberColumn("Ph√≠ v·∫≠n chuy·ªÉn", format="%d ƒë"),
                    "buyer_paid_shipping_fee": st.column_config.NumberColumn("Ph√≠ VC ng∆∞·ªùi mua tr·∫£", format="%d ƒë"),
                    "actual_shipping_fee": st.column_config.NumberColumn("Ph√≠ VC th·ª±c t·∫ø", format="%d ƒë"),
                    "shopee_subsidized_shipping_fee": st.column_config.NumberColumn("Shopee tr·ª£ gi√° VC", format="%d ƒë"),
                    "seller_voucher_code": "M√£ gi·∫£m gi√°",
                    "fixed_fee": st.column_config.NumberColumn("Ph√≠ c·ªë ƒë·ªãnh", format="%d ƒë"),
                    "service_fee": st.column_config.NumberColumn("Ph√≠ d·ªãch v·ª•", format="%d ƒë"),
                    "payment_fee": st.column_config.NumberColumn("Ph√≠ thanh to√°n", format="%d ƒë"),
                    "commission_fee": st.column_config.NumberColumn("Ph√≠ hoa h·ªìng", format="%d ƒë"),
                    "affiliate_marketing_fee": st.column_config.NumberColumn("Ph√≠ ti·∫øp th·ªã li√™n k·∫øt", format="%d ƒë"),
                    "buyer_username": "Ng∆∞·ªùi mua"
                }
                
                st.dataframe(df_revenue, column_config=column_config_revenue, use_container_width=True,
                            hide_index=True, column_order=list(column_config_revenue.keys()))
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu doanh thu.")